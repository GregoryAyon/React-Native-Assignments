{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useContext } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { styles } from \"./styles\";\nimport { db } from \"./firebase-config\";\nimport { collection, addDoc } from \"firebase/firestore\";\nimport AuthContext from \"../context/AuthContext\";\nimport TransactionContext from \"../context/TransactionContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport var AddTransaction = function AddTransaction() {\n  var _useContext = useContext(AuthContext),\n      user = _useContext.user;\n\n  var _useContext2 = useContext(TransactionContext),\n      getTransactions = _useContext2.getTransactions,\n      setTransactLoading = _useContext2.setTransactLoading;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      amount = _useState4[0],\n      setAmount = _useState4[1];\n\n  var userTransactionTable = collection(db, \"userTransactionTable\");\n\n  var handleSubmit = function handleSubmit() {\n    setTransactLoading(true);\n\n    if (text.trim() === \"\" || amount.trim() === \"\") {\n      alert(\"Please fill the fields!\");\n    } else {\n      addDoc(userTransactionTable, {\n        userID: user.uid,\n        text: text,\n        amount: parseFloat(amount)\n      });\n      setText(\"\");\n      setAmount(\"\");\n      getTransactions();\n      alert(\"your transaction add successfully!\");\n    }\n\n    setTransactLoading(false);\n  };\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(Text, {\n      style: [styles.sectionTitle, styles.h3],\n      children: \"Add new transaction\"\n    }), _jsxs(View, {\n      children: [_jsxs(View, {\n        children: [_jsx(Text, {\n          style: styles.label,\n          children: \"Text\"\n        }), _jsx(TextInput, {\n          style: [styles.input],\n          onChangeText: function onChangeText(value) {\n            return setText(value);\n          },\n          value: text,\n          placeholder: \"Enter text...\"\n        })]\n      }), _jsxs(View, {\n        children: [_jsxs(Text, {\n          style: styles.label,\n          children: [\"amount\", \"\\n\", \"(negative - expense, positive - income)\"]\n        }), _jsx(TextInput, {\n          style: [styles.input],\n          keyboardType: \"numeric\",\n          onChangeText: function onChangeText(value) {\n            return setAmount(value);\n          },\n          value: amount,\n          placeholder: \"Enter amount...\"\n        }), _jsx(Button, {\n          onPress: handleSubmit,\n          title: \"Add Transaction\",\n          color: \"#444\",\n          accessibilityLabel: \"Learn more about this purple button\"\n        })]\n      })]\n    })]\n  });\n};","map":{"version":3,"names":["React","useState","useContext","styles","db","collection","addDoc","AuthContext","TransactionContext","AddTransaction","user","getTransactions","setTransactLoading","text","setText","amount","setAmount","userTransactionTable","handleSubmit","trim","alert","userID","uid","parseFloat","sectionTitle","h3","label","input","value"],"sources":["E:/Bohubrihi Full Stack Course/React Native Practice File/finance-app/src/components/AddTransaction.jsx"],"sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport { Text, TextInput, View, Button } from \"react-native\";\r\nimport { styles } from \"./styles\";\r\nimport { db } from \"./firebase-config\";\r\nimport { collection, addDoc } from \"firebase/firestore\";\r\nimport AuthContext from \"../context/AuthContext\";\r\nimport TransactionContext from \"../context/TransactionContext\";\r\n\r\nexport const AddTransaction = () => {\r\n  const { user } = useContext(AuthContext);\r\n  const { getTransactions, setTransactLoading } =\r\n    useContext(TransactionContext);\r\n  const [text, setText] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n\r\n  const userTransactionTable = collection(db, \"userTransactionTable\");\r\n\r\n  const handleSubmit = () => {\r\n    setTransactLoading(true);\r\n    if (text.trim() === \"\" || amount.trim() === \"\") {\r\n      alert(\"Please fill the fields!\");\r\n    } else {\r\n      addDoc(userTransactionTable, {\r\n        userID: user.uid,\r\n        text: text,\r\n        amount: parseFloat(amount),\r\n      });\r\n      setText(\"\");\r\n      setAmount(\"\");\r\n      getTransactions();\r\n      alert(\"your transaction add successfully!\");\r\n    }\r\n    setTransactLoading(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Text style={[styles.sectionTitle, styles.h3]}>Add new transaction</Text>\r\n      <View>\r\n        <View>\r\n          <Text style={styles.label}>Text</Text>\r\n          <TextInput\r\n            style={[styles.input]}\r\n            onChangeText={(value) => setText(value)}\r\n            value={text}\r\n            placeholder=\"Enter text...\"\r\n          />\r\n        </View>\r\n        <View>\r\n          <Text style={styles.label}>\r\n            amount{\"\\n\"}(negative - expense, positive - income)\r\n          </Text>\r\n          <TextInput\r\n            style={[styles.input]}\r\n            keyboardType=\"numeric\"\r\n            onChangeText={(value) => setAmount(value)}\r\n            value={amount}\r\n            placeholder=\"Enter amount...\"\r\n          />\r\n          <Button\r\n            onPress={handleSubmit}\r\n            title=\"Add Transaction\"\r\n            color=\"#444\"\r\n            accessibilityLabel=\"Learn more about this purple button\"\r\n          />\r\n        </View>\r\n      </View>\r\n    </>\r\n  );\r\n};\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;;;;;AAEA,SAASC,MAAT;AACA,SAASC,EAAT;AACA,SAASC,UAAT,EAAqBC,MAArB,QAAmC,oBAAnC;AACA,OAAOC,WAAP;AACA,OAAOC,kBAAP;;;;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;EAClC,kBAAiBP,UAAU,CAACK,WAAD,CAA3B;EAAA,IAAQG,IAAR,eAAQA,IAAR;;EACA,mBACER,UAAU,CAACM,kBAAD,CADZ;EAAA,IAAQG,eAAR,gBAAQA,eAAR;EAAA,IAAyBC,kBAAzB,gBAAyBA,kBAAzB;;EAEA,gBAAwBX,QAAQ,CAAC,EAAD,CAAhC;EAAA;EAAA,IAAOY,IAAP;EAAA,IAAaC,OAAb;;EACA,iBAA4Bb,QAAQ,CAAC,EAAD,CAApC;EAAA;EAAA,IAAOc,MAAP;EAAA,IAAeC,SAAf;;EAEA,IAAMC,oBAAoB,GAAGZ,UAAU,CAACD,EAAD,EAAK,sBAAL,CAAvC;;EAEA,IAAMc,YAAY,GAAG,SAAfA,YAAe,GAAM;IACzBN,kBAAkB,CAAC,IAAD,CAAlB;;IACA,IAAIC,IAAI,CAACM,IAAL,OAAgB,EAAhB,IAAsBJ,MAAM,CAACI,IAAP,OAAkB,EAA5C,EAAgD;MAC9CC,KAAK,CAAC,yBAAD,CAAL;IACD,CAFD,MAEO;MACLd,MAAM,CAACW,oBAAD,EAAuB;QAC3BI,MAAM,EAAEX,IAAI,CAACY,GADc;QAE3BT,IAAI,EAAEA,IAFqB;QAG3BE,MAAM,EAAEQ,UAAU,CAACR,MAAD;MAHS,CAAvB,CAAN;MAKAD,OAAO,CAAC,EAAD,CAAP;MACAE,SAAS,CAAC,EAAD,CAAT;MACAL,eAAe;MACfS,KAAK,CAAC,oCAAD,CAAL;IACD;;IACDR,kBAAkB,CAAC,KAAD,CAAlB;EACD,CAhBD;;EAkBA,OACE;IAAA,WACE,KAAC,IAAD;MAAM,KAAK,EAAE,CAACT,MAAM,CAACqB,YAAR,EAAsBrB,MAAM,CAACsB,EAA7B,CAAb;MAAA;IAAA,EADF,EAEE,MAAC,IAAD;MAAA,WACE,MAAC,IAAD;QAAA,WACE,KAAC,IAAD;UAAM,KAAK,EAAEtB,MAAM,CAACuB,KAApB;UAAA;QAAA,EADF,EAEE,KAAC,SAAD;UACE,KAAK,EAAE,CAACvB,MAAM,CAACwB,KAAR,CADT;UAEE,YAAY,EAAE,sBAACC,KAAD;YAAA,OAAWd,OAAO,CAACc,KAAD,CAAlB;UAAA,CAFhB;UAGE,KAAK,EAAEf,IAHT;UAIE,WAAW,EAAC;QAJd,EAFF;MAAA,EADF,EAUE,MAAC,IAAD;QAAA,WACE,MAAC,IAAD;UAAM,KAAK,EAAEV,MAAM,CAACuB,KAApB;UAAA,qBACS,IADT;QAAA,EADF,EAIE,KAAC,SAAD;UACE,KAAK,EAAE,CAACvB,MAAM,CAACwB,KAAR,CADT;UAEE,YAAY,EAAC,SAFf;UAGE,YAAY,EAAE,sBAACC,KAAD;YAAA,OAAWZ,SAAS,CAACY,KAAD,CAApB;UAAA,CAHhB;UAIE,KAAK,EAAEb,MAJT;UAKE,WAAW,EAAC;QALd,EAJF,EAWE,KAAC,MAAD;UACE,OAAO,EAAEG,YADX;UAEE,KAAK,EAAC,iBAFR;UAGE,KAAK,EAAC,MAHR;UAIE,kBAAkB,EAAC;QAJrB,EAXF;MAAA,EAVF;IAAA,EAFF;EAAA,EADF;AAkCD,CA7DM"},"metadata":{},"sourceType":"module"}